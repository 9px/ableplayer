{"name":"Able Player","tagline":"Fully accessible cross-browser HTML5 media player. ","body":"*Able Player* is a fully accessible cross-browser media player. It uses\r\nthe HTML5 \\<audio\\> or \\<video\\> element for browsers that support them,\r\nand (optionally) the JW Player as a fallback for those that don’t.\r\n\r\nFunctioning examples of the player are available at [terrillthompson.com][example page].\r\n\r\nFeatures\r\n--------\r\n\r\n-   Supports both audio and video.\r\n-   Supports either a single audio track or an entire playlist.\r\n-   Includes a custom media controller, with HTML buttons that are fully\r\n    accessible to keyboard users and people using non-visual\r\n    technologies such as screen readers and Braille output devices.\r\n-   Supports closed captions for video\r\n-   Supports audio description either by swapping out the video with a\r\n    separate audio described version or by text.\r\n-   Both the HTML5 player and fallback player use the same custom\r\n    interface, so users whose browsers don’t support HTML5 media get a\r\n    virtually identical experience.\r\n\r\nCompatibility\r\n-------------\r\n\r\n*Able Player* has been tested with the following browsers and assistive\r\ntechnologies.\r\n\r\n-   Firefox 3.x and higher\r\n-   Internet Explorer 7 and higher\r\n-   Google Chrome 7.0 and higher\r\n-   Opera 10.63 and higher\r\n-   Safari 5.0 on Mac OS X\r\n-   Safari on IOS 3.2.2 and higher (audio only, video plays in default IOS player)\r\n-   Chrome on Android 4.2 and higher\r\n\r\nNote that mobile browsers have limitations (e.g., volume control and autostart are not supported) \r\n\r\nDependencies\r\n------------\r\n\r\n*Able Player* has a few dependencies, but most are either provided with\r\n*Able Player* or available through Google’s hosted libraries. The one\r\nexception is the fallback player—see the *Fallback* section below for\r\ndetails.\r\n\r\n-   *Able Player* uses [jQuery][]. The example code\r\n    below uses Google’s hosted libraries; no download required.\r\n-   *Able Player* uses [Modernizr][] to enable styling of HTML5 elements\r\n    in Internet Explorer 6 through 8. A Modernizr 2.6.2 Custom Build is\r\n    distributed with *Able Player*, and is all that *Able Player* needs.\r\n-   *Able Player* uses [jquery.cookie][] to store and retrieve user\r\n    preferences in cookies. This script is distributed with *Able\r\n    Player*.\r\n\r\nFallback\r\n--------\r\n\r\nFor older browsers that don’t support HTML5 media elements, you need a\r\nfallback solution. *Able Player* was developed to work seamlessly with\r\n[JW Player][], specifically **JW Player 6**. JW Player is free for\r\nnon-commercial use but is licensed separately and is not distributed\r\nwith *Able Player*. If you choose to use JW Player as your fallback\r\nplayer, users with older browsers including Internet Explorer 6-8 will\r\nhave the same experience with *Able Player* as users with newer\r\nbrowsers. Identical functionality has been attained using both the HTML5\r\nand JW Player APIs. After licensing and downloading JW PLayer, copy\r\n*jwplayer.js*, *jwplayer.html5.js*, and *jwplayer.flash.swf* into the\r\n*Able Player* */thirdparty* directory.\r\n\r\nNote that *most* browsers in use today support HTML5 media elements.\r\nHere’s a breakdown:\r\n\r\n-   Chrome since 3.0\r\n-   Firefox since 3.5\r\n-   Safari since 3.1\r\n-   Opera since 10.5\r\n-   Internet Explorer since 9.0\r\n\r\nAt some point we may decide that it’s reasonable to stop supporting a\r\nfallback player. However, according to [WebAIM’s 2014 Screen Reader User\r\nSurvey][] 19.8% of screen reader users are still using Internet Explorer 8, 7, or 6. Until these users catch up, I think we have to provide a\r\nworking fallback.\r\n\r\nAs an alternative fallback, you could link to the media file so users\r\ncan download it and play it on their player of choice, and/or provide a\r\ntranscript.\r\n\r\nSetup Step 1: Use HTML5 Doctype\r\n-------------------------------\r\n\r\n*Able Player* is built on the HTML5 media elements, so at the top of\r\nyour web page be sure you have the HTML5 doctype:\r\n\r\n```HTML\r\n<!DOCTYPE html>\r\n```\r\n\r\nSetup Step 2: Add JavaScript and CSS\r\n------------------------------------\r\n\r\nCopy and paste the following code into your web page. This code applies\r\nto all use cases, both audio and video.\r\n\r\n```HTML\r\n<!-- Dependencies -->\r\n<script src=\"thirdparty/modernizr.custom.js\"></script>\r\n<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js\"></script>\r\n<script src=\"//ajax.googleapis.com/ajax/libs/jqueryui/1.9.1/jquery-ui.min.js\"></script>\r\n<script src=\"thirdparty/jquery.cookie.js\"></script>\r\n<link rel=\"stylesheet\" href=\"http://code.jquery.com/ui/1.9.1/themes/base/jquery-ui.css\">\r\n \r\n<!-- CSS --> \r\n<link rel=\"stylesheet\" href=\"styles/ableplayer.css\" type=\"text/css\"/>\r\n \r\n<!-- JavaScript -->\r\n<script src=\"scripts/ableplayer.js\"></script>\r\n```\r\n\r\nSetup Step 3: Add HTML\r\n----------------------\r\n\r\nAdd an HTML5 \\<audio\\> or \\<video\\> element to your web page, as\r\nfollows.\r\n\r\n### Audio\r\n\r\nCopy and paste the following code into your web page, replacing the\r\nsource files with the path to your own media files. Use both OGG and MP3\r\nto ensure cross-browser compatibility, since some browsers don’t support\r\nMP3.\r\n\r\n```HTML\r\n<audio id=\"audio1\" class=\"ump-media\" preload=\"auto\">\r\n  <source type=\"audio/ogg\" src=\"path_to_audio_file.ogg\"/>\r\n  <source type=\"audio/mpeg\" src=\"path_to_audio_file.mp3\"/>\r\n</audio>\r\n```\r\n\r\nThe following attributes are supported on the \\<audio\\> element:\r\n\r\n-   **id** - required; any unique ID\r\n-   **class** - required; must be **ump-media**\r\n-   **preload** - optional; tells the browser how much media to download\r\n    when the page loads. If the media is the central focus of the web\r\n    page, use **preload=“auto”**, which instructs the browser to\r\n    download as much of the media as possible. If the media is not a\r\n    central focus, downloading the entire media resource can consume\r\n    valuable bandwidth, so preload=“metadata” would be a better option.\r\n\r\n### Video\r\n\r\nCopy and paste the following code into your web page, replacing the\r\nsource files with the path to your own media files.\r\n\r\n```HTML\r\n<video id=\"video1\" class=\"ump-media\" preload=\"auto\" width=\"480\" height=\"360\" poster=\"path_to_image.jpg\">\r\n  <source type=\"video/webm\" src=\"path_to_video.webm\" data-desc-src=\"path_to_described_video.webm\"/>\r\n  <source type=\"video/mp4\" src=\"path_to_video.mp4\" data-desc-src=\"path_to_described_video.mp4\"/>\r\n  <track kind=\"captions\" src=\"path_to_captions.vtt\"/>\r\n  <track kind=\"descriptions\" src=\"path_to_descriptions.vtt\"/>\r\n</video>\r\n```\r\n\r\nThe following attributes are supported on the \\<video\\> element:\r\n\r\n-   **id** - required; any unique ID\r\n-   **class** - required; must be **ump-media**\r\n-   **preload** - optional; use “auto” or “metadata”. See explanation\r\n    above under *Audio*.\r\n-   **width** - width of the video in pixels. If not provided will\r\n    default to 480.\r\n-   **height** - height of the video in pixels. If not provided will\r\n    default to 360.\r\n-   **poster** - path to an image file. Will be displayed in the player\r\n    until the video is played.\r\n\r\nThe following additional features are supported by *Able Player*:\r\n\r\n#### Multiple source files\r\n\r\nAs with audio, we recommend including two versions of each video, one in\r\nH.264 (MP4) and another in WebM or OGG for browsers that don’t support\r\nMP4. Browsers will play the first media source that they support.\r\n\r\n#### Closed Captions\r\n\r\nCaptions are added using the <track> element with kind=“captions”.\r\nCaptions must be in [Web Video Text Tracks (WebVTT)][] format. WebVTT\r\ntags within captions are not currently supported.\r\n\r\nIf captions are provided for a video, a CC button will be added to the\r\n*Able Player* controller.\r\n\r\n#### Audio Description\r\n\r\nSupplemental description of key visual content for blind users can be\r\nadded using one of two methods.\r\n\r\nThe first method is the same as closed captions, a <track> element, with\r\nkind=“descriptions”. This points to a WebVTT file, which is essentially\r\nthe same as a closed caption file, but its contents are description text\r\nrather than captions. With this method, description text is written to a\r\ncontainer that has ARIA role=“alert”. Supporting screen readers\r\nautomatically announce the new text as soon as it is written to the\r\npage.\r\n\r\nThe second method is to produce a separate video with description mixed\r\nin. If multiple video sources are already provided (e.g., an MP4 and\r\nWebM file), then the described version must be available in both of\r\nthese formats. For each video source that has a described version\r\navailable, add a **data-desc-src** attribute to the <source> element for\r\nthat video. The value of this attribute is a path pointing to the\r\ndescribed version of the video. With this method, the described version\r\nof the video can be played instead of the non-described version, and the\r\ntwo versions can be swapped with clicking the “D” button on the\r\ncontroller.\r\n\r\nIf descriptions are available using either of the above methods, a\r\nDescription toggle button appears on the controller (represented by the\r\nuniversal Description symbol, the letter “D”). How descriptions are\r\nultimately delivered depends on which of the above methods is used, and\r\non user preference. If a user prefers text-based description announced\r\nby their screen reader, that’s what they’ll get. If they prefer an\r\nalternate video with description mixed it, that’s what they’ll get. See\r\nthe section below on *User Preferences* for additional information about\r\npreferences.\r\n\r\nSetup Step 4: Initialize the Media Player\r\n-----------------------------------------\r\n\r\nInitialize the player with the following JavaScript command, replacing\r\n*audio1* if needed with the id of your media player.\r\n\r\n```JavaScript\r\nnew AblePlayer(id,index,startTime); \r\n```\r\n\r\nThe AblePlayer object accepts the following parameters:\r\n\r\n-   **id** of the media element\r\n-   **index** of this *Able Player* instance (optional; if page includes\r\n    only one player, index = 0)\r\n-   **startTime** in seconds (optional; default of 0 begins playing at\r\n    the beginning)\r\n\r\nIn the following examples, the player is initialized inside a jQuery\r\ndocument ready function to be sure the DOM has fully loaded.\r\n\r\nIn the first example, a single player is initialized:\r\n\r\n```HTML\r\n<script>\r\n  $(document).ready(function() {\r\n    new AblePlayer('audio1');  \r\n  });\r\n</script>\r\n```\r\n\r\nIn the next example, all players on the page are initialized. This same code could optionally be used universally, even on pages that just have one player.\r\n\r\n```HTML\r\n<script>\r\n    $(document).ready(function() { \r\n      $('.ump-media').each(function(index) { \r\n        new AblePlayer($(this).attr('id'),index);       \r\n      });\r\n    });\r\n</script>\r\n```\r\n\r\nIn the next example, a single player is initialized and starts playing at 2 minutes (120 seconds).\r\n\r\n```HTML\r\n<script>\r\n  $(document).ready(function() {\r\n    new AblePlayer('audio1',0,120);  \r\n  });\r\n</script>\r\n```\r\n\r\nSetup Step 5: Review User-Defined Variables in *ableplayer.js*\r\n--------------------------------------------------------------\r\n\r\nThe JavaScript file *ableplayer.js* includes a block of user-defined\r\nvariables that can be modified from their default settings, such as\r\nvolume, color of controller buttons, seek interval for rewind and\r\nforward buttons, and others. Explanations of each variable are provided\r\nin the comments.\r\n\r\nPlaylists\r\n---------\r\n\r\nAn *Able Player* playlist is an HTML list of tracks. The list can be\r\neither ordered (\\<ol\\>) or unordered (\\<ul\\>). The following attributes\r\nare supported on the list element:\r\n\r\n-   **class** - required; must be **ump-playlist**\r\n-   **data-player** - required; must reference the ID of the media\r\n    player in which the playlist should be played.\r\n-   **data-embedded** - optional; add this attribute if you want your\r\n    playlist to be embedded into the media player. If this attribute is\r\n    omitted, the playlist will be external to the player and will appear\r\n    wherever you place it on the web page.\r\n\r\nWithin the playlist, each list item must include data-\\* attributes\r\nwhere \\* is the media type and the value of the attribute is the URL\r\npointing to the media file of that type. For example, the following\r\naudio playlist includes three songs, each of which is available in MP3\r\nand OGG:\r\n\r\n```HTML\r\n<ul class=\"ump-playlist\" data-player=\"audio1\" data-embedded>\r\n  <li data-mp3=\"song1.mp3\" data-ogg=\"song1.ogg\">My First Song</li>\r\n  <li data-mp3=\"song2.mp3\" data-ogg=\"song2.ogg\">My Second Song</li>\r\n  <li data-mp3=\"song3.mp3\" data-ogg=\"song3.ogg\">My Third Song</li>\r\n</ul>\r\n```\r\n\r\n**Supported data-\\* audio types:**\r\n\r\n-   mp3\r\n-   ogg or oga\r\n-   wav\r\n\r\n**Supported data-\\* video types:**\r\n\r\n-   mp4\r\n-   webm or webmv\r\n-   ogg or ogv\r\n\r\nWhen a playlist is included on a page, the \\<source\\> elements within\r\nthe \\<audio\\> or \\<video\\> tags are optional. If they are provided, they\r\nshould match the first item in the playlist.\r\n\r\nIf your web page includes a playlist, you should also link to the\r\n*ableplayer-playlist.css* file, as follows:\r\n\r\n```HTML\r\n<link rel=\"stylesheet\" href=\"styles/ump-playlist.css\" type=\"text/css\"/>\r\n```\r\n\r\nInteractive Transcript\r\n----------------------\r\n\r\n*Able Player* interactive transcripts include the following features:\r\n\r\n-   Clicking anywhere in the transcript starts playing the media at that\r\n    point.\r\n-   This same functionality is accessible to keyboard users, who can tab\r\n    through the transcript and press Enter at any point to start playing\r\n    the media at that point. Since this creates a lot of extra tab stops\r\n    on the page, this might be undesirable functionality for some\r\n    keyboard users so it’s disabled by default. It can be toggled on/off\r\n    in the Preferences dialog.\r\n-   Text in the transcript is highlighted as the media plays. This can\r\n    be toggled on/off in the Preferences dialog.\r\n\r\n### Setting up a Transcript\r\n\r\nThe transcript can appear anywhere on the page, but must be wrapped in a\r\ncontainer with **class=“ump-transcript”**\r\n\r\nThe transcript is comprised of small blocks of text, each with its own\r\nstart and end time. These text blocks most likely correspond with\r\ncaptions and descriptions. Each block of text must be wrapped in a\r\n\\<span\\> with **data-start** and **data-end** attributes. The values of\r\nthese attributes are expressed in seconds. These attributes are\r\noptional, but if a \\<span\\> does not include these attributes it will\r\nnot be clickable.\r\n\r\nFor full accessibility, the transcript should include both captions and\r\ndescriptions. To differentiate the two, blocks of uninterrupted\r\ndescription text should be wrapped in a \\<div\\> with the following\r\nmarkup:\r\n\r\n```HTML\r\n<div class=\"ump-desc\">\r\n  <span class=\"hidden\">Description: </span>\r\n  <span>Description text goes here.</span>\r\n</div>\r\n```\r\n\r\nThe following is an example transcript that includes both captions and description.\r\n\r\n```HTML\r\n<div class=\"ump-transcript\">\r\n  <h2>Transcript</h2>\r\n  <div>\r\n    <span class=\"ump-unspoken\">[Music]</span>\r\n  </div>\r\n  <div class=\"ump-desc\">\r\n    <span class=\"hidden\">Description: </span>\r\n    <span>A blue circle has pairs of arching pairs inside. Underneath, DO-IT.</span>\r\n    <span>Words appear in a white box: World Wide Access.</span>\r\n  </div>\r\n  <div>\r\n    <span class=\"ump-unspoken\">[Narrator]</span>\r\n    <span  data-start=\"9.165\" data-end=\"10.792\"> You want these people.</span>\r\n    <span  data-start=\"10.792\" data-end=\"13.759\">They order your products, sign up for your services,</span>\r\n    <span  data-start=\"13.759\" data-end=\"16.627\">enroll in your classes, read your opinions,</span>\r\n    <span  data-start=\"16.627\" data-end=\"18.561\">and watch your videos.</span>\r\n    <span  data-start=\"18.561\" data-end=\"24.165\">You'll never see them, but they know you- through your website.</span>\r\n    <span  data-start=\"24.165\" data-end=\"25.891\">Or maybe not.</span>\r\n    <span  data-start=\"25.891\" data-end=\"30.396\">Your website's visitors aren't a  faceless mass of identical mouse-clickers</span>\r\n    <span  data-start=\"30.396\" data-end=\"32.363\">but a vibrant community of individuals</span>\r\n    <span  data-start=\"32.363\" data-end=\"35.297\">with varying tastes, styles, and abilities.</span>\r\n    <span  data-start=\"35.297\" data-end=\"39.132\">This includes people with disabilities.</span>\r\n  </div>\r\n  <div class=\"ump-desc\">\r\n    <span class=\"hidden\">Description:</span>\r\n    <span>Terrill Thompson, Technology Accessibility Specialist:</span>\r\n  </div>\r\n  <div>\r\n    <span class=\"ump-unspoken\">[Terrill]</span>\r\n    <span  data-start=\"39.132\" data-end=\"41\"> It's important for web designers and developers</span>\r\n    <span  data-start=\"41\" data-end=\"45.5\">to realize that what they see currently on their computer,</span>\r\n    <span  data-start=\"45.5\" data-end=\"49.264\">at their resolution, with their browser and their operating system</span>\r\n    <span  data-start=\"49.264\" data-end=\"52\">is not going to be necessarily  the same thing that everybody else sees.</span>\r\n  </div>\r\n</div><!-- end transcript -->\r\n```\r\n\r\n*Able Player* includes a PHP utility *ableplayer-transcript-maker.php*,\r\nlocated in the *php* directory, that converts one or more WebVTT files\r\ninto an UMP transcript. Consult the source code of this file for\r\ninstructions.\r\n\r\nMIME Types\r\n----------\r\n\r\nIf your media doesn’t play, one possibility is that your web server is\r\nattempting to serve up the media with the incorrect MIME type. On\r\nApache, this can be correct by adding the following commands to the\r\n.htaccess file:\r\n\r\n```\r\n# Audio MIME Types\r\nAddType audio/mpeg mp3\r\nAddType audio/mp4 mp4 \r\nAddType audio/mp4 mpa\r\nAddType audio/ogg ogg\r\nAddType audio/ogg oga\r\nAddType audio/wav wav \r\n\r\n# Video MIME Types\r\nAddType video/mp4 mp4\r\nAddType video/ogg ogv\r\nAddType video/webm webm\r\n```\r\n\r\nIf you don’t have access to your server’s .htaccess file, you should be\r\nable to view and add MIME types somewhere within your server’s control\r\npanel.\r\n\r\nIf your site is running on a Windows server, consult the documentation\r\nfrom Microsoft. For example:\r\n\r\n-   [Configuring MIME Types in IIS 7][]\r\n-   [How to add MIME Types with IIS7 Web.config][]\r\n\r\nKeyboard Shortcuts\r\n------------------\r\n\r\nUMP includes several keyboard shortcuts that enable users to control the\r\nplayer from anywhere on the web page. By default, each of these is a\r\nsingle keystroke, as follows:\r\n\r\n-   **p or spacebar** = Play/Pause\r\n-   **s** = Stop\r\n-   **r** = Rewind 10 seconds\r\n-   **f** = Forward10 seconds\r\n-   **c** = Toggle captions\r\n-   **m** = Mute\r\n-   **u or 1-5** = Volume Up\r\n-   **d or 1-5** = Volume Down\r\n-   **t** = Settings\r\n-   **h** = Help\r\n\r\nNote that modifier keys (Alt and Control) can be assigned by clicking\r\nthe Preferences button on the player. If users find that shortcut keys\r\naren’t working as advertised, they might have better success by\r\nselecting different combinations of modifier keys to accompany the\r\ndefault shortcut keys.\r\n\r\nUser Preferences\r\n----------------\r\n\r\nOne of *Able Player’s* accessibility features is that the player is\r\nhighly customizable by users. The controller includes a Preferences\r\nbutton that allows users to change default preferences and settings.\r\nTheir changes are stored in a browser cookie and in most cases should\r\ntherefore be preserved the next time they visit the site. Specifically,\r\nusers can control the following:\r\n\r\n-   Modifier keys: Add *Alt*, *Ctrl*, or both to the UMP keyboard\r\n    shortcuts to avoid conflicts with other applications.\r\n-   Closed captions on by default\r\n-   Description on by default\r\n-   Use text-based description if available.\r\n-   If using text-based description, make it visible.\r\n-   Highlight transcript as video plays\r\n-   Keyboard-enable transcript\r\n\r\n\r\n  [example page]: http://terrillthompson.com/ableplayer/\r\n  [jQuery]: http://jquery.com/\r\n  [jQuery UI]: http://jqueryui.com/\r\n  [Modernizr]: http://modernizr.com/\r\n  [jquery.cookie]: https://github.com/carhartl/jquery-cookie\r\n  [JW Player]: http://www.jwplayer.com/\r\n  [WebAIM’s 2014 Screen Reader User Survey]: http://webaim.org/projects/screenreadersurvey5/#browsers\r\n  [Configuring MIME Types in IIS 7]: http://technet.microsoft.com/en-us/library/17bda1f4-8a0d-440f-986a-5aaa9d40b74c.aspx\r\n  [How to add MIME Types with IIS7 Web.config]: http://blogs.iis.net/bills/archive/2008/03/25/how-to-add-mime-types-with-iis7-web-config.aspx\r\n  \r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}